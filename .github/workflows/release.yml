name: Manage version, release, and PKGBUILD

on:
  push:
    branches:
      - master                    # monitor changes only in the master branch
    paths:
      - doc/package.conf          # monitor changes to the package metadata file
  workflow_dispatch:              # allow manually triggering the workflow

env:
  GH_TOKEN: ${{ secrets.GH_ACTIONS_TOKEN }}

jobs:
  metadata:
    runs-on: ubuntu-latest
    env:
      METADATA_FILE: "doc/package.conf"
      REQUIRED_VARS: "namespace version arch"
    outputs:
      version: ${{ steps.get_metadata.outputs.version }}
      namespace: ${{ steps.get_metadata.outputs.namespace }}
      arch: ${{ steps.get_metadata.outputs.arch }}
    steps:
      - name: Check out the repository
        id: checkout
        uses: actions/checkout@v3
        with:
          token: ${{ env.GH_TOKEN }}
          fetch-depth: 0

      - name: Source metadata file and export variables
        id: get_metadata
        run: |
          # source values from metadata file
          source "${METADATA_FILE}"

          for var in ${REQUIRED_VARS}; do
            # ensure variable is set
            key="__${var}__"
            if [ -z "${!key}" ]; then
              echo "ERROR: Required variable \"${key}\" was not set successfully."
              exit 1
            fi
            # export variable to output
            echo "${var}=${!key}" | tee -a ${GITHUB_OUTPUT}
          done

  check:
    runs-on: ubuntu-latest
    needs: metadata
    outputs:
      release_exists: ${{ steps.check_release.outputs.exists }}
    steps:
      - name: Check out the repository
        id: checkout
        uses: actions/checkout@v3
        with:
          token: ${{ env.GH_TOKEN }}
          fetch-depth: 0

      - name: Check if release exists
        id: check_release
        run: |
          # set variables
          version="${{ needs.metadata.outputs.version }}"

          # check if release of said version exists
          if [[ "$(gh release view "v${version}" 2>&1)" == "release not found" ]]; then
            echo "Release v${version} has not been created."
            exists=false
          else
            echo "Release v${version} already exists."
            exists=true
          fi

          # export result to output
          echo "exists=${exists}" | tee -a ${GITHUB_OUTPUT}

  go:
    runs-on: ubuntu-latest
    needs: [metadata, check]
    if: needs.check.outputs.release_exists == 'false'
    steps:
      - name: Check out the repository
        id: checkout
        uses: actions/checkout@v3
        with:
          token: ${{ env.GH_TOKEN }}
          fetch-depth: 0

      - name: Update version in source files
        id: update_version
        run: |
          # set variables
          version="${{ needs.metadata.outputs.version }}"

          # update version badge in markdown files
          find . -type f -name "*.md" -exec sed -i "s/\(Version-\)[0-9]*\.[0-9]*\.[0-9]*\(-informational\)/\1${version}\2/g;s/\[Version: [0-9]*\.[0-9]*\.[0-9]*\]/\[Version: ${version}\]/g" {} +

          # update version in shell files
          find . -type f -name "*.sh" -exec sed -i -E "s/kde-service-menu-reimage \(version [0-9]+\.[0-9]+(\.[0-9]+)?\)/kde-service-menu-reimage (version ${version})/g" {} +

          # update version in binary files
          find ./bin -type f -exec sed -i -E "s/kde-service-menu-reimage \(version [0-9]+\.[0-9]+(\.[0-9]+)?\)/kde-service-menu-reimage (version ${version})/g" {} +

          # update version in config files
          find ./doc -type f -name "*.config" -exec sed -i "s/version=.*/version=${version}/g" {} +

          # update version in service menu .desktop files
          find ./ServiceMenus -type f -name "*.desktop" -exec sed -i -E "s/kde-service-menu-reimage \(version [0-9]+\.[0-9]+(\.[0-9]+)?\)/kde-service-menu-reimage (version ${version})/g" {} +

      - name: Package assets into archive
        id: package_asset
        run: |
          # set package values
          name="${{ needs.metadata.outputs.namespace }}"
          version="${{ needs.metadata.outputs.version }}"
          arch="${{ needs.metadata.outputs.arch }}"
          asset="${name}_${version}_${arch}.tar.gz"

          # package required assets into a tar.gz file
          tar -czvf "${asset}" bin doc ServiceMenus *.sh README.md

          # export result to output
          echo "asset=${asset}" | tee -a ${GITHUB_OUTPUT}
          echo "md5sum=$(md5sum "${asset}" | awk '{print $1}')" | tee -a ${GITHUB_OUTPUT}

      - name: Update PKGBUILD
        id: update_pkgbuild
        run: |
          # set variables
          version="${{ needs.metadata.outputs.version }}"
          release="1"
          md5sum="${{ steps.package_asset.outputs.md5sum }}"

          # update pkgver in PKGBUILD
          sed -i "s/^pkgver=.*/pkgver=${version}/" PKGBUILD

          # reset the pkgrel number to 1
          sed -i "s/^pkgrel=.*/pkgrel=${release}/" PKGBUILD

          # update the md5sums array with the new md5sum
          sed -i "s/^md5sums=.*/md5sums=('${md5sum}')/" PKGBUILD

      - name: Check if files have changes
        id: check_changes
        run: |
          # set variables
          asset="${{ steps.package_asset.outputs.asset }}"

          # add local files except asset
          git add . -- ":!${asset}"

          # determine if changes were made
          if git diff --cached --exit-code >/dev/null; then
            echo "No changes have been made."
            exists=false
          else
            echo "Changes have been made and are pending commit."
            exists=true
          fi

          # export result to output
          echo "exists=${exists}" | tee -a ${GITHUB_OUTPUT}

      - name: Commit and push updated files
        id: push_changes
        if: steps.check_changes.outputs.exists == 'true'
        run: |
          # set variables
          version="${{ needs.metadata.outputs.version }}"

          # configure git user
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

          # commit changes
          git commit -m "Bump version to ${version}"

          # push changes to current remote branch
          git push -u origin HEAD

      - name: Get commit messages since last release
        id: get_commits
        run: |
          # get previous version
          prev_version=$(git describe --tags --abbrev=0 HEAD^ || echo "HEAD")

          # get commits between versions
          if [[ "${prev_version}" != "HEAD" ]]; then
            prev_version="${prev_version}..HEAD"
          fi
          commits="$(git log "${prev_version}" --oneline | base64 -w 0)"

          # export result to output
          echo "commits=${commits}" | tee -a ${GITHUB_OUTPUT}

      - name: Create GitHub release
        id: create_release
        run: |
          # set variables
          version="${{ needs.metadata.outputs.version }}"
          commits="${{ steps.get_commits.outputs.commits }}"

          # determine main branch
          main_branch=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          # decode the commit messages
          decoded_commits=$(echo "${commits}" | base64 --decode)
          # prepare release notes
          release_notes="Release v${version}.\n\n**Changes**:\n\n${decoded_commits}"

          # create release
          gh release create "v${version}" \
            --title "v${version}" \
            --notes "$(echo -e "${release_notes}")" \
            --target "${main_branch}" \
            --generate-notes

      - name: Upload assets to release
        id: upload_asset
        run: |
          # set variables
          version="${{ needs.metadata.outputs.version }}"
          asset="${{ steps.package_asset.outputs.asset }}"

          # upload asset to the GitHub release
          gh release upload "v${version}" "${asset}"
